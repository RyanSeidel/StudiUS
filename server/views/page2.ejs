<style>
  body {
      font-family: Arial, sans-serif;
      height: 100vh;
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: #f5f5f5;
  }

  .chat-container {
      background-color: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0px 0px 15px rgba(0,0,0,0.2);
      width: 80%;
      max-width: 500px;
  }

  #chat-box {
    width: 400px;
    height: 300px;
    border: 1px solid #ccc;
    padding: 10px;
    margin: 0 auto;
    overflow-y: auto;
    display: flex;
    flex-direction: column; /* Remove the 'reverse' */
    justify-content: flex-end; /* New messages at the bottom */
}


.current-user-message,
.other-user-message {
    margin: 5px 0;
    padding: 10px;
    border-radius: 15px;
    max-width: 250px; /* Limit the width */
    word-wrap: break-word; /* Allow long words to be broken and wrap onto the next line */
}

#localVideo.inactive {
  display: none;
}



  #message-input {
      width: 100%;
      padding: 10px;
      margin-bottom: 10px;}

      .current-user-message {
        text-align: right;
        background-color: #DCF8C6;
        align-self: flex-end; /* Align to the right */
    }
    
    .other-user-message {
        text-align: left;
        background-color: #EDEDED;
        align-self: flex-start; /* Align to the left */
    }

      #localVideo, #remoteVideo {
          width: 320px;
          height: 240px;
      }

</style>


<h1>Welcome to Page 2, <%= name %>!</h1>

    <video id="localVideo" autoplay playsinline></video>
    <video id="remoteVideo" autoplay playsinline></video>

<div class="chat-container">
    <div id="chat-box"></div>
    <input type="text" id="message-input">
    <button onclick="sendMessage()">Send</button>
    <input type="file" id="image-input" name="file">
    <button onclick="sendImage()">Send Image</button>
    <button id="toggleCamera">Toggle Camera</button>
    <button id="toggleMicrophone">Toggle Microphone</button>


</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io.connect('http://0.0.0.0:3000');

    // const socket = io.connect('http://3.12.163.231:3000');
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    const configuration = { 'iceServers': [{ 'urls': 'stun:stun.l.google.com:19302' }] };
    const peerConnection = new RTCPeerConnection(configuration);
    let isCameraOn = true;  // Assuming the camera is on by default
    let localStream;

    document.getElementById('toggleCamera').addEventListener('click', function() {
        if (isCameraOn) {
            if (localStream) {
                let tracks = localStream.getTracks();
                tracks.forEach(track => track.stop());
                localStream = null;
            }
            localVideo.classList.add('inactive'); // Hide the video element
            isCameraOn = false;
        } else {
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(stream => {
                    localStream = stream;
                    localVideo.srcObject = stream;
                    localVideo.classList.remove('inactive'); // Show the video element
                    isCameraOn = true;
                })
                .catch(error => {
                    console.error('Error accessing the camera and microphone', error);
                });
        }
    });

    document.getElementById('toggleMicrophone').addEventListener('click', function() {
      if (isMicrophoneOn && localStream) {
          localStream.getAudioTracks()[0].enabled = false;
          isMicrophoneOn = false;
      } else if (localStream) {
          localStream.getAudioTracks()[0].enabled = true;
          isMicrophoneOn = true;
      }
  });

  // Capture the local video and audio stream
  navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then(stream => {
          localStream = stream;
          localVideo.srcObject = stream;
          stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));
      })
      .catch(error => {
          console.error('Error accessing the camera and microphone', error);
      });



    // Capture the local video and audio stream
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then(stream => {
            localVideo.srcObject = stream;
            stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));
        })
        .catch(error => {
            console.error('Error accessing the camera and microphone', error);
        });

    // Handle the creation of the offer
    peerConnection.onnegotiationneeded = async () => {
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        socket.emit('offer', offer);
    };

    // Update the remote stream when a new remote stream is added
    peerConnection.ontrack = event => {
        if (remoteVideo.srcObject !== event.streams[0]) {
            remoteVideo.srcObject = event.streams[0];
        }
    };

    // Handle the receipt of an offer
    socket.on('offer', async (offer) => {
        await peerConnection.setRemoteDescription(offer);
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.emit('answer', answer);
    });

    // Handle the receipt of an answer
    socket.on('answer', answer => {
        peerConnection.setRemoteDescription(answer);
    });

    // Handle ICE Candidate events
    peerConnection.onicecandidate = event => {
        if (event.candidate) {
            socket.emit('ice-candidate', event.candidate);
        }
    };

    socket.on('ice-candidate', iceCandidate => {
        const candidate = new RTCIceCandidate(iceCandidate);
        peerConnection.addIceCandidate(candidate);
    });

    // Existing messaging logic
    socket.on('receiveMessage', (message) => {
        const chatBox = document.getElementById('chat-box');
        const messageDiv = document.createElement('div');
      
        if (message.senderName === '<%= name %>') {
            messageDiv.classList.add('current-user-message');
        } else {
            messageDiv.classList.add('other-user-message');
        }

        if (message.body.startsWith('<img')) {
            messageDiv.innerHTML = `${message.senderName}: ${message.body}`;
        } else {
            messageDiv.textContent = `${message.senderName}: ${message.body}`;
        }

        chatBox.appendChild(messageDiv);
    });

    function sendMessage() {
        const input = document.getElementById('message-input');
        socket.emit('sendMessage', {
            senderName: '<%= name %>',
            body: input.value
        });
        input.value = '';
    }

    function sendImage() {
        const imageInput = document.getElementById('image-input');
        const formData = new FormData();
        formData.append('file', imageInput.files[0]);

        fetch('/upload', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            const imageUrl = data.imageUrl;
            socket.emit('sendMessage', {
                senderName: '<%= name %>',
                body: `<img src="${imageUrl}" alt="Image" width="200">`
            });
        });
    }
</script>

