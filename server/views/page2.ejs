<style>
    :root {
        --blue-color-light: #6eb5ff;
        --blue-color-dark: #4b7eff;
        --background-color: #f9f9f9;
        --background-message-color: #f6f8fc;
        --text-color: #fff;
    }
    body {
        font-family: Arial, sans-serif;
        height: 100vh;
        margin: 0 10px;
        justify-content: center;
        align-items: center;
        background-color: #fff;
    }
    button {
        background-color: var(--blue-color-light);
        display: inline-block;
        width: 150px;
        height: 40px;
        padding: 0;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    .chat-container {
        padding: 30px;
    }
    .chat-container-content {
        margin: 30px;
        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
    }
    #chat-box {
        width: 100%;
        height: 70%;
        overflow-y: auto;
        display: flex;
        flex-direction: column-reverse;
        background-color: var(--background-message-color);
        min-height: 0; /* Add this line */
    }
    
    .current-user-message,
    .other-user-message {
        margin: 5px 0;
        padding: 10px;
        border-radius: 15px;
        max-width: 250px;
        word-wrap: break-word;
        overflow-wrap: break-word; /* Helps break long words */
    }
    #localVideo.inactive {
        opacity: 0;
    }
    
    .msg-bottom {
        padding: 10px 20px;
        background-color: #fff;
        border-radius: 0px 0px 10px 10px;
    }
    .msg-top {
        padding: 20px;
        background-color: #fff;
        border-radius: 10px 10px 0px 0px;
    }
    #message-input {
        width: 100%;
        padding: 12px 20px;
        margin: 5px 0;
        border-radius: 30px;
        border: 1px solid #ccc;
        background-size: 85px 80px;
        background-repeat: no-repeat; /* Ensure the image doesn't repeat */
        background-position: right 10px center; /* Position the image to the right with some padding */
        padding-right: 60px; /* Provide space for the image preview so text doesn't overlap */
        max-height: 10vh;
        min-height: 1vh;
        height: auto; /* Allow the height to adjust dynamically */
        transition: height 0.3s; /* Smooth transition for height changes */
    }
      

    .icon-group {
        margin: 5px 15px;
        display: flex;
        justify-content: space-between;
    }
    .icon-left span {
        margin-right: 10px;
    }
    .icon-left span i,
    .send-icon {
        font-size: 20px;
    }
    .icon-left span i:hover,
    .send-icon:hover {
        color: var(--blue-color-light);
        cursor: pointer;
        transition: 0.2s;
    }
    .current-user-message {
        margin: 0 15px 15px 0;
        text-align: right;
        background-color: var(--blue-color-dark);
        align-self: flex-end;
        color: #fff;
    }
    .other-user-message {
        text-align: left;
        background-color: #ededed;
        align-self: flex-start;
    }
    .camera-active, .microphone-active {
        color: red;
    }
    #localVideo,
    #remoteVideo {
        height: 120px;
    }
    #localVideo {
        border-radius: 10px;
    }
    .video-container {
        margin: 10px 100px;
        height: 15vh;
        background-color: var(--blue-color-light);
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 10px;
    }
    .screen-parent {
        background-color: #fff;
        width: 90%;
        display: flex;
        flex-direction: row;
    }
    .screen-center {
        display: flex;
        justify-content: center;
        height: 80vh;
    }
    .left-screen,
    .chat-container {
        flex: 1;
    }
    .left-screen {
        padding: 30px;
        border-right: 1px solid #ccc;
    }
    #audioMeterModal {
        margin-top: 10px;
        height: 10px;
        background-color: #ddd;
        width: 100%; /* Ensures it takes the full width of its container */
    }
    
    #audioMeterModal div {
        height: 10px;
        width: 0;
        background-color: green;
        transition: width 0.1s;
    }
    

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }
    
    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 30%;
        position: relative;
    }
    
    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        position: absolute;
        top: 0;
        right: 15px;
        cursor: pointer;
    }
    
    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }
    
    .input-container {
        position: relative;
    }
    
    .clear-preview {
        display: none;
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
    }
    
</style>

<body>
    <div class="video-container">
        <video id="localVideo" autoplay playsinline></video>
        <video id="remoteVideo" autoplay playsinline></video>
    </div>
    <div id="audioMeter"><div></div></div>
    <div class="screen-center">
        <div class="screen-parent">
            <div class="left-screen">
            </div>
            <div class="chat-container">
                <div class="chat-container-content">
                    <div class="msg-top"></div>
                    <div id="chat-box"></div>
                    <div class="msg-bottom">
                        <div class="input-container">
                            <input type="text" id="message-input" placeholder="Write Something..." />
                            <span class="clear-preview" onclick="clearPreview()">&#10005;</span> <!-- Button to clear preview -->
                        </div>                        
                        <div class="icon-group">
                            <div class="icon-left">
                                <span class="image-input-container">
                                    <input type="file" id="image-input" name="file" style="display: none; visibility: none" onchange="displayPreview(this)" />
                                    <label for="image-input"><i class="fa-regular fa-image"></i></label>
                                </span>
                                <span id="toggleCamera"><i class="fa-solid fa-camera camera-active"></i></span>
                                <span id="toggleMicrophone"><i class="fa-solid fa-microphone microphone-active"></i></span>
                                
                            </div>
                            <span onclick="sendMessage()"><i class="send-icon fa-regular fa-paper-plane"></i></span>
                            <button id="settingsBtn">Settings</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Settings</h2>
            <label for="microphoneList">Choose a microphone:</label>
            <select id="microphoneList"></select>
            <h3>Audio Metering</h3>
            <div id="audioMeterModal" class="audio-meter"><div></div></div>

        </div>
    </div>
    
</body>

<!-- Embed code for icon -->
<script src="https://kit.fontawesome.com/fb5c3cd0c8.js" crossorigin="anonymous"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const urlParams = new URLSearchParams(window.location.search);
    const roomId = urlParams.get("roomId");
    const Username = "<%= name %>"; 
    
    socket.emit("join-room", roomId, Username);

    const localVideo = document.getElementById("localVideo");
    const configuration = {
    iceServers: [
        { 
            urls: "stun:18.117.68.27:3478" 
        },
        {
            urls: "turn:18.117.68.27:3478",
            username: "test",
            credential: "password"
        }
    ]
    };

    const peerConnection = new RTCPeerConnection(configuration);
    let isCameraOn = true;
    let isMicrophoneOn = true;
    let localStream;

    function startAudioMetering(stream, meterElementId) {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const analyser = audioContext.createAnalyser();
        const source = audioContext.createMediaStreamSource(stream);
        source.connect(analyser);
    
        analyser.fftSize = 256;
        const bufferLength = analyser.frequencyBinCount;
        const dataArray = new Uint8Array(bufferLength);
    
        function updateAudioMeter() {
            analyser.getByteFrequencyData(dataArray);
    
            let values = 0;
            let length = dataArray.length;
            for (let i = 0; i < length; i++) {
                values += dataArray[i];
            }
    
            const volume = Math.floor(values / length);
            document.getElementById(meterElementId).querySelector('div').style.width = `${volume}%`
            requestAnimationFrame(updateAudioMeter);
        }
    
        updateAudioMeter();
    }
    

    document.getElementById("toggleCamera").addEventListener("click", function () {
        const cameraIcon = this.querySelector('i');
        if (localStream && localStream.getVideoTracks().length > 0) {
            let videoTrack = localStream.getVideoTracks()[0];
            videoTrack.enabled = !videoTrack.enabled;
            if (videoTrack.enabled) {
                console.log("Camera turned on");
                cameraIcon.classList.add('camera-active');
                localVideo.classList.remove('inactive'); // Show video
            } else {
                console.log("Camera turned off");
                cameraIcon.classList.remove('camera-active');
                localVideo.classList.add('inactive'); // Hide video (opacity 0)
            }
        }
    });
    

    document.getElementById("toggleMicrophone").addEventListener("click", function () {
        const microphoneIcon = this.querySelector('i');
        if (localStream && localStream.getAudioTracks().length > 0) {
            let audioTrack = localStream.getAudioTracks()[0];
            audioTrack.enabled = !audioTrack.enabled;
            if (audioTrack.enabled) {
                startAudioMetering(localStream);
                console.log("Microphone activated");
                microphoneIcon.classList.add('microphone-active');
            } else {
                console.log("Microphone muted");
                microphoneIcon.classList.remove('microphone-active');
            }
        }
    });

    navigator.mediaDevices
        .getUserMedia({ video: true, audio: true })
        .then((stream) => {
            localStream = stream;
            localVideo.srcObject = stream;
            stream
                .getTracks()
                .forEach((track) => peerConnection.addTrack(track, stream));
        })
        .catch((error) => {
            console.error("Error accessing the camera and microphone", error);
        });

    peerConnection.onnegotiationneeded = async () => {
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        socket.emit("offer", offer);
    };

    peerConnection.ontrack = (event) => {
        const remoteVideo = document.getElementById("remoteVideo");
        if (remoteVideo.srcObject !== event.streams[0]) {
            remoteVideo.srcObject = event.streams[0];
        }
    };

    socket.on("offer", async (offer) => {
        await peerConnection.setRemoteDescription(offer);
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.emit("answer", answer);
    });

    socket.on("answer", (answer) => {
        peerConnection.setRemoteDescription(answer);
    });

    peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            socket.emit("ice-candidate", event.candidate);
        }
    };

    socket.on("ice-candidate", (iceCandidate) => {
        const candidate = new RTCIceCandidate(iceCandidate);
        peerConnection.addIceCandidate(candidate);
    });

    socket.on("receiveMessage", (message) => {
        const chatBox = document.getElementById("chat-box");
        const isAtTop = chatBox.scrollTop === 0;
        const messageDiv = document.createElement("div");
    
        if (message.senderName === "<%= name %>") {
            messageDiv.classList.add("current-user-message");
        } else {
            messageDiv.classList.add("other-user-message");
        }
    
        if (message.body.startsWith("<img")) {
            messageDiv.innerHTML = `${message.body} : ${message.senderName}`;
        } else {
            messageDiv.textContent = `${message.body} : ${message.senderName}`;
        }
    
        chatBox.insertBefore(messageDiv, chatBox.firstChild);
    
        // If the chat was at the top, scroll to the top after adding a new message
        if (isAtTop) {
            chatBox.scrollTop = 0;
        }
    });

    document.getElementById('image-preview').innerHTML = ''; // Clear the image preview

    function displayPreview(input) {
        const file = input.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(event) {
                const messageInput = document.getElementById('message-input');
                messageInput.style.backgroundImage = `url(${event.target.result})`;
    
                // Display the clear preview button
                document.querySelector('.clear-preview').style.display = 'block';
    
                // Adjust the height of the text box based on the image's height
                const img = new Image();
                img.src = event.target.result;
                img.onload = function() {
                    // Adjust the height of the input field if the image is large
                    if (img.height > 100) {  // Example: Adjust based on a certain height, you can change this value
                        messageInput.style.height = `${img.height}px`;
                    }
                }
            }
            reader.readAsDataURL(file);
        }
    }
    

    function clearPreview() {
        const messageInput = document.getElementById('message-input');
        const imageInput = document.getElementById("image-input");
        
        messageInput.style.backgroundImage = 'none';
        messageInput.style.height = '40px'; // Reset the height to original size
        document.querySelector('.clear-preview').style.display = 'none';
        
        imageInput.value = ''; // Clear the file input's value
    }
       
     
    function sendMessage() {
        const input = document.getElementById("message-input");
        const inputValue = input.value.trim();
        const imageInput = document.getElementById("image-input");
    
        if (imageInput.files.length > 0) {
            const formData = new FormData();
            formData.append("image", imageInput.files[0]);
    
            fetch("/upload", {
                method: "POST",
                body: formData,
            })
            .then((response) => response.json())
            .then((data) => {
                const imageUrl = data.imageUrl;
                socket.emit("sendMessage", {
                    roomId: roomId,
                    senderName: "<%= name %>",
                    body: `<img src="${imageUrl}" alt="Image" width="150">`,
                });
                imageInput.value = ""; // Clear the image input
                input.style.backgroundImage = 'none'; // Remove the image preview
                input.style.height = '40px'; // Reset the height to original size
                document.querySelector('.clear-preview').style.display = 'none'; // Hide the clear preview button
            });
        } else if (inputValue) {
            socket.emit("sendMessage", {
                roomId: roomId,
                senderName: "<%= name %>",
                body: inputValue,
            });
            input.value = ""; // Clear the input field
        } else {
            alert("Sorry, you didn't type anything or attach an image.");
        }
    }
    


    // this is for PPOPUP SETTINGS
    // Get modal and elements
let modal = document.getElementById("settingsModal");
let btn = document.getElementById("settingsBtn");
let span = document.getElementsByClassName("close")[0];
let microphoneSelect = document.getElementById("microphoneList");

// Open the modal
btn.onclick = function() {
    populateMicrophones();
    if (localStream && localStream.getAudioTracks().length > 0) {
        startAudioMetering(localStream, 'audioMeterModal');
    } else {
        console.error("No audio tracks available in localStream.");
    }
    modal.style.display = "block";
}

microphoneSelect.addEventListener('change', function() {
    const selectedDeviceId = this.value;
    navigator.mediaDevices.getUserMedia({ audio: { deviceId: selectedDeviceId } })
        .then(stream => {
            localStream = stream;
            startAudioMetering(localStream, 'audioMeterModal');
            console.log("Change has been confirmed"); // Added this line
        })
        .catch(error => {
            console.error("Error accessing the selected microphone", error);
        });
});



// Close the modal
span.onclick = function() {
    modal.style.display = "none";
}

// Close the modal if clicked outside content
window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = "none";
    }
}

// Function to populate microphone list
function populateMicrophones() {
    navigator.mediaDevices.enumerateDevices()
    .then(devices => {
        let microphoneList = document.getElementById("microphoneList");
        microphoneList.innerHTML = ''; // Clear existing options

        const currentAudioTrack = localStream && localStream.getAudioTracks()[0];
        const currentDeviceId = currentAudioTrack && currentAudioTrack.getSettings().deviceId;

        devices.forEach(device => {
            if (device.kind === "audioinput") {
                let option = document.createElement("option");
                option.value = device.deviceId;
                option.text = device.label || 'Microphone ' + (microphoneList.length + 1);
                if (device.deviceId === currentDeviceId) {
                    option.selected = true;
                }
                microphoneList.appendChild(option);
            }
        });
    })
    .catch(err => {
        console.error("Error populating microphones:", err);
    });
}


</script>
