<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome the Islander</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            background-color: #f7f7f7;
        }

        .center-box {
            width: 80%; /* Adjust width as needed */
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
            display: flex;
        }

        .left-column {
            width: 33.33%; /* Users list is 1/3 width */
            padding: 20px;
            border-right: 1px solid #eee;
            display: flex;
            flex-direction: column;
            align-items: center; /* Center the container of the user list */
            background-color: #f2f2f2; /* Faded gray background */
        }

        .left-column h2 {
            align-self: center; /* Ensure the title remains centered */
            margin-bottom: 10px; /* Add some space below the title */
        }

        #users-list {
            width: 100%;
            border: 1px solid #ccc; /* Border around the user list */
            border-radius: 5px; /* Rounded corners for the user list */
            overflow-y: auto; /* If there are many users, make it scrollable */
        }

        #users-list > div {
            text-align: left; /* Align user names to the left */
            padding: 5px 10px;
            margin: 5px 0;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        #users-list > div:hover {
            background-color: #eee;
        }

        .right-column {
            width: 66.67%; /* Main content is 2/3 width */
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        #create-group-button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 20px;
        }
    </style>
</head>

<body>
    <h1>Welcome the Islander, <%= name %>!</h1>

    <div class="center-box">
        <!-- Left column for users -->
        <div class="left-column">
            <h2>Users:</h2>
            <div id="users-list"></div>
        </div>

        <!-- Right column for main content -->
        <div class="right-column">
            <h3>Create a Group Chat</h3>
            <input type="text" id="roomName" placeholder="Room Name">
            <div id="users-for-room">

            </div>
            <button id="create-room-button">Create Room</button>
            <h3>Your Rooms:</h3>
            <div id="rooms-list">
                <h3>Existing Rooms:</h3>
                <!-- The rooms will be appended here -->
            </div>
        </div>
    </div>

    <script>
        // Fetch users and populate them with checkboxes
        fetch('/users')
        .then(response => response.json())
        .then(users => {
            const usersDiv = document.getElementById('users-for-room');
            users.forEach(user => {
                const userDiv = document.createElement('div');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = user._id;
                checkbox.id = `user-${user._id}`;
                const label = document.createElement('label');
                label.htmlFor = `user-${user._id}`;
                label.textContent = user.name;
                userDiv.appendChild(checkbox);
                userDiv.appendChild(label);
                usersDiv.appendChild(userDiv);
            });
        });
    
        function fetchRooms() {
            fetch('/get-rooms')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(rooms => {
                const roomsListDiv = document.getElementById('rooms-list');
                roomsListDiv.innerHTML = '<h3>Existing Rooms:</h3>';
                
                rooms.forEach(room => {
                    const roomDiv = document.createElement('div');
                    roomDiv.textContent = room.name;
                    roomDiv.style.cursor = 'pointer';
                    roomDiv.addEventListener('click', () => {
                        // Navigate to the chat page for the clicked room
                        window.location.href = `/chatroom?roomId=${room._id}`;
                    });
                    roomsListDiv.appendChild(roomDiv);
                });
            })
            .catch(error => {
                console.error("Error fetching rooms:", error);
            });
        }
    
        // Call the function to fetch and display the rooms when the page loads
        fetchRooms();
    
        document.getElementById('create-room-button').addEventListener('click', () => {
            console.log('Create Room button clicked');
    
            const roomName = document.getElementById('roomName').value;
            const checkboxes = document.querySelectorAll('#users-for-room input[type="checkbox"]:checked');
            const selectedUsers = Array.from(checkboxes).map(cb => cb.value);
    
            fetch('/create-room', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ roomName, allowedUsers: selectedUsers })
            })
            .then(res => {
                if (!res.ok) {
                    return res.json().then(err => { throw err; });
                }
                return res.json();
            })
            .then(room => {
                fetchRooms();
                // Handle what you want to do after creating the room.
            })
            .catch(error => {
                console.error("Error creating room:", error);
            });            
        });
    </script>
     
</body>

</html>
