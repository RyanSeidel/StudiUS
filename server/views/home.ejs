<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome to the Island</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            background-color: #f2f2f2;
            margin: 0;
            padding: 0;
        }

        h2 {
            color: #004b9b;
        }

        .center-box {
            width: 80%;
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1), 0 3px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            overflow: hidden;
        }

        .left-column {
            width: 33.33%;
            padding: 20px;
            border-right: 1px solid #ccc;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #d4e4f5;
        }

        .left-column h2 {
            color: #004b9b;
            margin-bottom: 10px;
        }

        #users-list {
            width: 100%;
            border: 1px solid #ccc;
            background-color: #0056b3;
            border-radius: 10px;
            overflow-y: auto;
            overflow-x: hidden;
        }

        #users-for-room {
            width: 100%;
            margin-bottom: 10px;
            background-color: #f5f5f5;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
        }

        #users-for-room button {
            display: block;
    margin-bottom: 5px;
    padding: 10px 16px; /* Adjusted padding for better fit */
    width: calc(100% - 32px); /* Adjusted width to consider padding */
    text-align: left;
    background-color: #fff;
    border: 1px solid #ccc;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s
        }

        #users-for-room button:hover {
            background-color: #f2f2f2;
        }

        .right-column {
            width: 66.67%;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: #d4e4f5;
        }

        #create-group-button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 20px;
        }

        #roomName {
            width: 100%;
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }

        #create-room-button {
            background-color: #004b9b;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 20px;
        }

        #create-room-button:hover {
            background-color: #0056b3;
        }

        #rooms-list {
            width: 100%;
            margin-top: 20px;
            background-color: #f5f5f5;
            border-radius: 10px;
            padding: 10px;
        }

        #rooms-list h3 {
            color: #004b9b;
            background-color: #ddd;
            padding: 5px 10px;
            border-radius: 5px;
        }

        #rooms-list div.room {
            background-color: #004b9b;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 20px;
        }

        #rooms-list div.room:hover {
            background-color: #0056b3;
        }

        .modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
}
.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 30%;
    position: relative;
}
.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    position: absolute;
    top: 0;
    right: 15px;
    cursor: pointer;
}
.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}
.profile-pic-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 10px 0;
}
#profilePic {
    width: 100px;
    height: 100px;
    border-radius: 50%;
}

    </style>
</head>
<body>
    <h1 style="color: #004b9b;">Welcome to the Island, <%= name %>!</h1>

    <div class="center-box">
        <div class="left-column">
            <h2>Users:</h2>
            <div id="users-list">
                <div id="users-for-room">

                </div>
            </div>
            <button>Edit Profile</button>
        </div>

        <div class="right-column">
            <h2>Create a Group Chat</h2>
            <input type="text" id="roomName" placeholder="Room Name">
            <button id="create-room-button">Create Room</button>

            <div id="rooms-list">
                <h3>Rooms:</h3>
            </div>
        </div>
    </div>

<!-- Edit Profile Modal -->
<div id="editProfileModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Edit Profile</h2>
        <div class="profile-pic-container">
            <img id="profilePic" src="<%= image %>" alt="Profile Picture" />
            <input type="file" id="imageUpload" style="display:none;">
            <button onclick="document.getElementById('imageUpload').click();">Change Picture</button>
        </div>
        <label for="name">Name:</label>
        <input type="text" id="nameInput" value="<%= name %>">
        <button id="saveProfileBtn">Save</button>
    </div>
</div>




    <script>
        // Fetch users and populate them with buttons
        fetch('/users')
        .then(response => response.json())
        .then(users => {
            const usersDiv = document.getElementById('users-for-room');
            users.forEach(user => {
                const button = document.createElement('button');
                button.textContent = user.name;
                button.addEventListener('click', () => {
                    // Handle button click event
                });
                usersDiv.appendChild(button);
            });
        });

        function fetchRooms() {
            fetch('/get-rooms')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(rooms => {
                const roomsListDiv = document.getElementById('rooms-list');
                roomsListDiv.innerHTML = '<h3>Existing Rooms:</h3>';
                
                rooms.forEach(room => {
                    const roomDiv = document.createElement('div');
                    roomDiv.className = 'room';
                    roomDiv.textContent = room.name;
                    roomDiv.style.cursor = 'pointer';
                    roomDiv.addEventListener('click', () => {
                        window.location.href = `/chatroom?roomId=${room._id}`;
                    });
                    roomsListDiv.appendChild(roomDiv);
                });
            })
            .catch(error => {
                console.error("Error fetching rooms:", error);
            });
        }

        fetchRooms();

        document.getElementById('create-room-button').addEventListener('click', () => {
            console.log('Create Room button clicked');
    
            const roomName = document.getElementById('roomName').value;
            // Handle selected users and create room logic here
    
            fetch('/create-room', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ roomName, allowedUsers: selectedUsers })
            })
            .then(res => {
                if (!res.ok) {
                    return res.json().then(err => { throw err; });
                }
                return res.json();
            })
            .then(room => {
                fetchRooms();
            })
            .catch(error => {
                console.error("Error creating room:", error);
            });            
        });

        // this is for edit profile 

// Edit Profile Modal handlers
let editProfileModal = document.getElementById("editProfileModal");
let editProfileBtn = document.querySelector(".left-column button");
let closeBtn = document.getElementsByClassName("close")[0];

// Open the modal
editProfileBtn.onclick = function() {
    editProfileModal.style.display = "block";
}

// Close the modal
closeBtn.onclick = function() {
    editProfileModal.style.display = "none";
}

// Close the modal if clicked outside content
window.onclick = function(event) {
    if (event.target == editProfileModal) {
        editProfileModal.style.display = "none";
    }
}

document.getElementById('saveProfileBtn').addEventListener('click', async () => {
    const newName = document.getElementById('nameInput').value;

    // Ensure the imageUpload element exists and has files before proceeding
    const imageInput = document.getElementById('imageUpload');
    let imageFile;
    if (imageInput && imageInput.files.length > 0) {
        imageFile = imageInput.files[0];
    }

    let newImageUrl;

    // Only upload the image if it exists
    if (imageFile) {
        const formDataForImage = new FormData();
        formDataForImage.append('image', imageFile);

        try {
            const imageResponse = await fetch('/upload-profile-pic', {
                method: 'POST',
                body: formDataForImage
            });

            const imageData = await imageResponse.json();

            if(imageData.success) {
                newImageUrl = imageData.newImageUrl;
            } else {
                throw new Error(imageData.error);
            }
        } catch(error) {
            console.error("Error uploading image:", error);
            return;
        }
    }

    const formDataForProfile = new FormData();
    formDataForProfile.append('name', newName);
    if(newImageUrl) {
        formDataForProfile.append('image', newImageUrl);
    }

    try {
        const profileResponse = await fetch('/update-profile', {
            method: 'POST',
            body: formDataForProfile
        });
        
        const profileData = await profileResponse.json();

        if(profileData.success) {
            // Update the name and image on the page
            document.querySelector('h1').textContent = `Welcome to the Island, ${newName}!`;
            if(newImageUrl) {
                document.getElementById('profilePic').src = newImageUrl;
            }
            editProfileModal.style.display = "none";
        } else {
            throw new Error(profileData.error);
        }
    } catch(error) {
        console.error("Error updating profile:", error);
    }
});


    </script>
</body>

</html>
