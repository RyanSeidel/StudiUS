<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome to the Island</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            background-color: #f2f2f2;
            margin: 0;
            padding: 0;
        }

        h2 {
            color: black;
            font-weight: 600;
            
        }

        .center-box {
            width: 80%;
            background: linear-gradient(45deg, #0071d7, #339965); /* Added this line for the gradient */
            padding: 25px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1), 0 3px 6px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .column-wrapper{
            display:flex;
            height: 80vh;
        }

        .left-column, .right-column {
            flex: 1; /* Takes up 1 fraction of the space */
            padding: 20px;
            border-right: 1px solid #ccc;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .left-column {
            border-top-left-radius: 25px;
            border-bottom-left-radius: 25px;
            background-color: #f2f2f2;
        }


        .right-column {
            border-right: none; /* Removing the right border as it's not needed here */
            border-top-right-radius: 25px;
            border-bottom-right-radius: 25px;
            background-color: rgba(242, 242, 242, 0.4);
        }

        #users-list {
            width: 100%;          
            border-radius: 10px;
            overflow-y: auto;
            overflow-x: hidden;
        }

        #users-for-room {
            width: 100%;
            margin-bottom: 10px;
            border-radius: 5px;
            padding: 10px;
        }

        #users-for-room button {
            display: flex;
            align-items: center; /* Vertically center the content */
            margin-bottom: 5px;
            padding: 10px 16px;
            width: calc(100% - 32px);
            text-align: left;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        #users-for-room button img {
            margin-right: 10px; /* Space between the image and the text */
        }
        

        #users-for-room button:hover {
            background-color: #f2f2f2;
        }

        .middle-column {
            flex: 2; /* Takes up 2 fractions of the space, making it larger */
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: rgba(242, 242, 242, 0.7);
        }

        #create-group-button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 20px;
        }

        #roomName {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
            width: 70%; /* Adjust to make the input wider, use a percentage so it's responsive */
            margin-right: 10px; /* Add some space between the input and the button */
        }

        .create-button {
            background-color: white;
            color: black;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .create-button:hover {
            background-color: #ddd;
        }

        #users-for-room button.selected {
            background-color: lightgreen;
        }        

        #rooms-list {
            width: 100%;
            margin-top: 20px;
            border-radius: 10px;
            padding: 10px;
        }

        #rooms-list h3 {
            color: #004b9b;
            background-color: #f2f2f2;
            padding: 5px 10px;
            border-radius: 5px;
        }

        #rooms-list div.room {
            background-color: #f2f2f2;
            color: black;
            padding: 15px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 20px;
            font-size: 12px;
        }

        #rooms-list div.room:hover {
            background-color: #ddd;
        }

        .modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
}
.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 30%;
    position: relative;
}
.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    position: absolute;
    top: 0;
    right: 15px;
    cursor: pointer;
}
.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}
.profile-pic-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 10px 0;
}
#profilePic {
    width: 100px;
    height: 100px;
    border-radius: 50%;
}

.room-name-flex{
    display: flex;
    align-items: center;
    width: 100%; /* Use the full width available */
}

.greeting-button, .create-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    white-space: nowrap;
    font-size: 16px; /* adjust as needed */
    padding: 10px 20px;
    box-sizing: border-box;
    border: none;
    border-radius: 5px;
    transition: background-color 0.3s, color 0.3s;
}

.greeting-button {
    background-color: #0071d7;
    color: white;
    cursor: pointer;
}

.greeting-button:hover {
    background-color: #0056b3;
    color: white;
}



    </style>
</head>
<body>
    <h1 style="color: #0071d7; font-size: 36px;">Welcome to the Island!</h1>

    <div class="center-box">
        <div class="column-wrapper">
        <div class="left-column">
            <div style="display:flex; gap: 20px; align-items:center;">
                <button class="greeting-button">Hello <%= name %>!</button>
                <form action="/logout" method="post">
                    <button type="submit" class="create-button">Log out</button>
                </form>                
            </div>
                                
            <h2>Users:</h2>
            <div style="display: flex; gap: 10px; align-items: center;">
            <input type="text" id="userSearch" placeholder="Search users...">
             <button id="unselectAllButton">Unselect All</button>
            </div>
            <div id="users-list">
            <div id="users-for-room">
             </div>
            </div>


        </div>

        <div class="middle-column">
            <h2>ALL ROOMS</h2>
            <!-- <div class="room-name-flex">
                <input type="text" id="roomName" placeholder="Room Name">
                <button id="init-create-room">Create Room</button>
            </div> -->
            <button class="create-button" id="init-create-room">Create Room</button>


            <div id="rooms-list">
            </div>
        </div>
        <div class="right-column">
            <h2>Statistics</h2>
        </div>
    </div>
    </div>

<!-- Edit Profile Modal -->
<div id="editProfileModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Edit Profile</h2>
        <div class="profile-pic-container">
            <img id="profilePic" src="<%= image %>" alt="Profile Picture" />
            <input type="file" id="imageUpload" style="display:none;">
            <button onclick="document.getElementById('imageUpload').click();">Change Picture</button>
        </div>
        <label for="name">Name:</label>
        <input type="text" id="nameInput" value="<%= name %>">
        <button id="updateUsernameBtn">Update Username</button>
        <button id="saveProfileBtn">Update Image</button>
    </div>
</div>

<div id="createRoomModal" class="modal">
    <div class="modal-content">
        <span class="close" id="closeCreateRoomModal">&times;</span>
        <h2>Create Room</h2>
        <label for="newRoomName">Room Name:</label>
        <input type="text" id="newRoomName" placeholder="Enter Room Name">
        <h3>Selected Users:</h3>
        <div id="selectedUsersDisplay"></div>
        <button id="confirmCreateRoom">Confirm</button>
    </div>
</div>

<script>
// Array to keep track of selected users
let selectedUsers = [];
let allUsers = [];  // Store all users for filtering

// Fetch users and populate them with buttons
fetch('/users')
    .then(response => response.json())
    .then(users => {
        allUsers = users;
        renderUsers(allUsers);

        const userSearchInput = document.getElementById('userSearch');
        userSearchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const filteredUsers = allUsers.filter(user => user.name.toLowerCase().includes(searchTerm));
            renderUsers(filteredUsers);
        });
    });

    function renderUsers(users) {
        const usersDiv = document.getElementById('users-for-room');
        usersDiv.innerHTML = '';  // Clear current users
        
        users.forEach(user => {
            const button = document.createElement('button');
    
            // Create an img element for the user's image
            const img = document.createElement('img');
            img.src = user.image;
            img.alt = `${user.name}'s Profile Image`;
            img.style.width = '30px';
            img.style.height = '30px';
            img.style.borderRadius = '15px';
            img.style.marginRight = '10px';
    
            // Append the image to the button before the text
            button.appendChild(img);
    
            // Add user name after the image
            const userNameTextNode = document.createTextNode(user.name);
            button.appendChild(userNameTextNode);
    
            // Check if the user is already selected
            if (selectedUsers.includes(user._id)) {
                button.classList.add('selected');
            }
    
            button.addEventListener('click', () => {
                // Toggle the 'selected' class on the button
                button.classList.toggle('selected');
    
                // Toggle user selection in the selectedUsers array
                if (selectedUsers.includes(user._id)) {
                    selectedUsers = selectedUsers.filter(userId => userId !== user._id);
                } else {
                    selectedUsers.push(user._id);
                }
            });
    
            usersDiv.appendChild(button);
        });
    }
    
    function fetchRooms() {
        fetch('/get-rooms')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(rooms => {
                const roomsListDiv = document.getElementById('rooms-list');
                rooms.forEach(room => {
                    const roomDiv = document.createElement('div');
                    roomDiv.className = 'room';
                    roomDiv.style.cursor = 'pointer';
                    roomDiv.style.margin = '10px 0';  // Margin for spacing between each room
    
                    const roomName = document.createElement('div');
                    roomName.textContent = `Group Name: ${room.name}`;
                    roomName.style.marginBottom = '5px';  // Margin for spacing between room name and member count
    
                    const roomMembers = document.createElement('div');
                    roomMembers.textContent = `${room.userIds.length} members`;
                    roomMembers.style.fontSize = '12px';
    
                    roomDiv.appendChild(roomName);
                    roomDiv.appendChild(roomMembers);
    
                    roomDiv.addEventListener('click', () => {
                        window.location.href = `/chatroom?roomId=${room._id}`;
                    });
    
                    roomsListDiv.appendChild(roomDiv);
                });
            })
            .catch(error => {
                console.error("Error fetching rooms:", error);
            });
    }
    
    fetchRooms();

    document.getElementById('unselectAllButton').addEventListener('click', () => {
        selectedUsers = [];
        const selectedButtons = document.querySelectorAll('#users-for-room button.selected');
        selectedButtons.forEach(button => {
            button.classList.remove('selected');
        });
    });
    
    
// Initiate Create Room Modal handlers
const initCreateRoomBtn = document.getElementById('init-create-room');
const createRoomModal = document.getElementById('createRoomModal');
const closeCreateRoomModalBtn = document.getElementById('closeCreateRoomModal');
const confirmCreateRoomBtn = document.getElementById('confirmCreateRoom');
const selectedUsersDisplay = document.getElementById('selectedUsersDisplay');
const newRoomNameInput = document.getElementById('newRoomName');

initCreateRoomBtn.addEventListener('click', () => {
    if (selectedUsers.length === 0) {
        alert("No users are selected.");
        return;
    }

    // Show the names of the selected users in the modal
    selectedUsersDisplay.innerHTML = ""; // Clear previous users
    selectedUsers.forEach(userId => {
        const userDiv = document.createElement('div');
        userDiv.textContent = userId; // For now, using userId as display. Modify this as needed.
        selectedUsersDisplay.appendChild(userDiv);
    });

    createRoomModal.style.display = "block"; // Show the modal
});

closeCreateRoomModalBtn.onclick = () => createRoomModal.style.display = "none";

window.onclick = event => {
    if (event.target === createRoomModal) {
        createRoomModal.style.display = "none";
    }
};

confirmCreateRoomBtn.addEventListener('click', () => {
    const roomName = newRoomNameInput.value;
    if (!roomName.trim()) {
        alert("Please provide a room name.");
        return;
    }

    fetch('/create-room', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ roomName, allowedUsers: selectedUsers })
    })
    .then(res => {
        if (!res.ok) {
            return res.json().then(err => { throw err; });
        }
        return res.json();
    })
    .then(room => {
        fetchRooms();
        createRoomModal.style.display = "none"; // Hide the modal
    })
    .catch(error => {
        console.error("Error creating room:", error);
    });
});

// Edit Profile Modal handlers
const editProfileModal = document.getElementById("editProfileModal");
const editProfileBtn = document.querySelector(".greeting-button");
const closeBtn = document.getElementsByClassName("close")[0];

// Open the modal
editProfileBtn.onclick = () => editProfileModal.style.display = "block";

// Close the modal
closeBtn.onclick = () => editProfileModal.style.display = "none";

window.onclick = event => {
    if (event.target === editProfileModal) {
        editProfileModal.style.display = "none";
    }
};

// Helper function to handle profile updates
const updateProfile = async (formData) => {
    try {
        const response = await fetch('/update-profile', {
            method: 'POST',
            body: formData
        });
        const responseData = await response.json();
        if (responseData.success) {
            editProfileModal.style.display = "none";
            location.reload();  // Refresh the page
        } else {
            throw new Error(responseData.error);
        }
    } catch(error) {
        console.error("Error updating profile:", error);
    }
};

document.getElementById('saveProfileBtn').addEventListener('click', async () => {
    const newName = document.getElementById('nameInput').value;
    const imageInput = document.getElementById('imageUpload');
    const formDataForProfile = new FormData();
    formDataForProfile.append('name', newName);

    if (imageInput && imageInput.files.length > 0) {
        const formDataForImage = new FormData();
        formDataForImage.append('image', imageInput.files[0]);
        try {
            const imageResponse = await fetch('/upload-profile-pic', {
                method: 'POST',
                body: formDataForImage
            });
            const imageData = await imageResponse.json();
            if (imageData.success) {
                formDataForProfile.append('image', imageData.newImageUrl);
                location.reload();  // Refresh the page
            } else {
                throw new Error(imageData.error);
            }
        } catch(error) {
            console.error("Error uploading image:", error);
            return;
        }
    } else {
        formDataForProfile.append('image', document.getElementById('profilePic').src);
    }

    updateProfile(formDataForProfile);
});

document.getElementById('updateUsernameBtn').addEventListener('click', () => {
    const newName = document.getElementById('nameInput').value;
    const formDataForName = new FormData();
    formDataForName.append('name', newName);
    updateProfile(formDataForName);
});

</script>

</body>

</html>
