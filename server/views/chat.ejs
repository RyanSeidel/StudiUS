<head>
    <link rel="stylesheet" href="../css/chatRoom.css">
    <script src="https://kit.fontawesome.com/fb5c3cd0c8.js" crossorigin="anonymous"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
<div id="video-container"></div>
    <div id="audioMeter"><div></div></div>
    <div class="screen-center">
        <div class="screen-parent">
            <div class="left-screen">
            </div>
            <div class="chat-container">
                <div class="chat-container-content">
                    <div class="msg-top"></div>
                    <div id="chat-box"></div>
                    <div class="msg-bottom">
                        <div class="input-container">
                            <input type="text" id="message-input" placeholder="Write Something..." />
                            <span class="clear-preview" onclick="clearPreview()">&#10005;</span> <!-- Button to clear preview -->
                        </div>                        
                        <div class="icon-group">
                            <div class="icon-left">
                                <span class="image-input-container">
                                    <input type="file" id="image-input" name="file" style="display: none; visibility: none" onchange="displayPreview(this)" />
                                    <label for="image-input"><i class="fa-regular fa-image"></i></label>
                                </span>
                                <span id="toggleCamera"><i class="fa-solid fa-camera camera-active"></i></span>
                                <span id="toggleMicrophone"><i class="fa-solid fa-microphone microphone-active"></i></span>
                                
                            </div>
                            <span onclick="sendMessage()"><i class="send-icon fa-regular fa-paper-plane"></i></span>
                            <button id="settingsBtn">Settings</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Settings</h2>
            <label for="microphoneList">Choose a microphone:</label>
            <select id="microphoneList"></select>
            <h3>Audio Metering</h3>
            <div id="audioMeterModal" class="audio-meter"><div></div></div>

        </div>
    </div>

  <script src="../js/chatRoom/audioMetering.js"></script>
  <script src="../js/chatRoom/preview.js"></script>
  <script src="../js/chatRoom/cameraToggle.js"></script>
  <script src="../js/chatRoom/Message.js"></script>
</body>

<script>
    const socket = io();
    const urlParams = new URLSearchParams(window.location.search);
    const roomId = urlParams.get("roomId");
    const name = "<%= name %>"; 
    const userId = "<%= userId %>";
    const videoContainer = document.getElementById('video-container'); // Ensure you have a container for video elements
    let localStream;

    const ROOM_NAME = new URLSearchParams(window.location.search).get('room'); // Get the room name from URL
    const myPeerConnections = {};

    // Configuration for the STUN and TURN servers
    const configuration = {
        iceServers: [
            { urls: "stun:18.117.68.27:3478" },
            {
                urls: "turn:18.117.68.27:3478",
                username: "test",
                credential: "password"
            }
        ]
    };

    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
  .then(stream => {
    localStream = stream;
    addVideoStream(stream);

    // issue we need to not use socket.id this is GARBAGE
    socket.emit('join-room', roomId, socket.id, name);
    
    socket.on('user-connected', userId => {
      console.log('User connected:', userId);
      const peerConnection = createPeerConnection(userId);
      myPeerConnections[userId] = peerConnection;
    });

    socket.on('offer', handleReceiveOffer);
    socket.on('answer', handleReceiveAnswer);
    socket.on('ice-candidate', handleNewICECandidateMsg);
  })
  .catch(e => {
    console.error('Failed to get local stream:', e);
  });

  socket.on('user-disconnected', userId => {
    console.log(`User disconnected: ${userId}`);
    if (myPeerConnections[userId]) {
      myPeerConnections[userId].close();
      delete myPeerConnections[userId];
      console.log(`Peer connection for user ${userId} closed.`);
    }
  
    const videoElement = document.querySelector(`[data-peer-id="${userId}"]`);
    if (videoElement) {
      videoElement.remove();
      console.log(`Video for user ${userId} removed.`);
    } else {
      console.log(`No video element found for user ${userId}.`);
    }
  });
  

  function createPeerConnection(userId) {
    // Configuration for the STUN and TURN servers
    const configuration = {
      iceServers: [
        { urls: "stun:18.117.68.27:3478" },
        {
          urls: "turn:18.117.68.27:3478",
          username: "test",
          credential: "password"
        }
      ]
    };
  
    const peerConnection = new RTCPeerConnection(configuration);

  localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

  peerConnection.onicecandidate = event => {
    if (event.candidate) {
      socket.emit('ice-candidate', event.candidate.toJSON(), userId);
    }
  };

  peerConnection.ontrack = event => {
    const remoteStream = event.streams[0];
    addVideoStream(remoteStream, userId); // Pass the userId associated with this stream
  };
  

  peerConnection.createOffer()
    .then(offer => peerConnection.setLocalDescription(offer))
    .then(() => {
      socket.emit('offer', peerConnection.localDescription.toJSON(), userId);
    })
    .catch(e => {
      console.error('Offer creation error:', e);
    });

  return peerConnection;
}

function handleReceiveOffer(offer, from) {
  const peerConnection = createPeerConnection(from);
  myPeerConnections[from] = peerConnection;
  
  peerConnection.setRemoteDescription(new RTCSessionDescription(offer))
    .then(() => peerConnection.createAnswer())
    .then(answer => peerConnection.setLocalDescription(answer))
    .then(() => {
      socket.emit('answer', peerConnection.localDescription.toJSON(), from);
    })
    .catch(e => {
      console.error('Answer handling error:', e);
    });
}

function handleReceiveAnswer(answer, from) {
  const peerConnection = myPeerConnections[from];
  peerConnection.setRemoteDescription(new RTCSessionDescription(answer))
    .catch(e => {
      console.error('Answer setting error:', e);
    });
}

function handleNewICECandidateMsg(candidate, from) {
  const peerConnection = myPeerConnections[from];
  peerConnection.addIceCandidate(new RTCIceCandidate(candidate))
    .catch(e => {
      console.error('ICE candidate error:', e);
    });
}

function addVideoStream(stream, userId) {
    // Check if video for this userId already exists
    let video = videoContainer.querySelector(`[data-peer-id="${userId}"]`);
    if (!video) {
        video = document.createElement('video');
        video.dataset.peerId = userId;
        videoContainer.appendChild(video);
    }
    video.srcObject = stream;
    video.autoplay = true;
    video.playsInline = true;
    video.controls = true;
    video.muted = userId == "<%= userId %>"; // Mute the local user's video
}


  // Define the function to remove the video element associated with the user
function removeVideoStream(userId) {
    const videoElement = videoContainer.querySelector(`[data-peer-id="${userId}"]`);
    if (videoElement) {
      videoElement.remove();
    }
  }

  socket.on("receiveMessage", (message) => {
      const chatBox = document.getElementById("chat-box");
      const isAtTop = chatBox.scrollTop === 0;
      const messageDiv = document.createElement("div");

      if (message.senderName === "<%= name %>") {
          messageDiv.classList.add("current-user-message");
      } else {
          messageDiv.classList.add("other-user-message");
      }

      if (message.body.startsWith("<img")) {
          messageDiv.innerHTML = `${message.body} : ${message.senderName}`;
      } else {
          messageDiv.textContent = `${message.body} : ${message.senderName}`;
      }

      chatBox.insertBefore(messageDiv, chatBox.firstChild);

      // If the chat was at the top, scroll to the top after adding a new message
      if (isAtTop) {
          chatBox.scrollTop = 0;
      }
  });
</script>
